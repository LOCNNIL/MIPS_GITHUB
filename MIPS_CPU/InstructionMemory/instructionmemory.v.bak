module instructionmemory(clock, address, data_out);

	// aux
	parameter DATA_WIDTH = 32, ADDR_WIDTH = 10;
	integer i;
	// input ports
	input clock;
	input[(ADDR_WIDTH - 1):0] address; // pc
	//output ports
	output reg[(DATA_WIDTH - 1):0] data_out; // instruction
	// inst_mem
	reg [(DATA_WIDTH - 1):0] inst_mem [0:(2**ADDR_WIDTH - 1)];

	initial
	begin
		inst_mem[0]  <= 32'b000101_00000_11110_0000_0000_0000_0000; // tst nop
		inst_mem[1]  <= 32'b000101_00000_10000_0000_0000_0000_0001; // load A
		inst_mem[2]  <= 32'b000101_00001_10001_0000_0000_0000_0010; // load B
		inst_mem[3]  <= 32'b000101_00010_10010_0000_0000_0000_0011; // load C
		inst_mem[4]  <= 32'b000101_00011_10011_0000_0000_0000_0100; // load D
		inst_mem[5]  <= 32'b000101_10000_11110_0000_0001_0000_0000; // nop
		inst_mem[6]  <= 32'b000100_00000_00001_11000_01010_100000; // a+b
		inst_mem[7]  <= 32'b000101_10000_11110_0000_0001_0000_0000; // nop
		inst_mem[8]  <= 32'b000100_00010_00011_11001_01010_100000; // c + d
		inst_mem[9]  <= 32'b000101_10000_11110_0000_0001_0000_0000; // nop
		inst_mem[10] <= 32'b000101_10000_11110_0000_0001_0000_0000; // nop
		inst_mem[11] <= 32'b000101_10000_11110_0000_0001_0000_0000; // nop
		inst_mem[12] <= 32'b000100_01000_01001_11010_01010_100010; // parc1 - parc2
		for(i = 13; i < 1024; i = i + 1)
		begin
			inst_mem[i] <= 32'b000100_01000_01001_11010_01010_100010; //sub
		end
	end

	always @ (posedge clock)
		 data_out <= inst_mem[address];

endmodule
